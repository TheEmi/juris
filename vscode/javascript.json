
{
	"Juris Component Template": {
		"prefix": "jcomp",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContext} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"const ${1:ComponentName} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        ${2:div}: {",
			"            className: '${3:container}',",
			"            children: [",
			"                $4",
			"            ]",
			"        }//${2:div}.${3:container}",
			"    };",
			"};"
		],
		"description": "Complete Juris component template with JSDoc"
	},
	"Juris Component with Lifecycle": {
		"prefix": "jcomplife",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContext} context",
			" * @returns {JurisLifecycleComponent}",
			" */",
			"const ${1:ComponentName} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        render: () => ({",
			"            ${2:div}: {",
			"                className: '${3:container}',",
			"                children: [",
			"                    $4",
			"                ]",
			"            }//${2:div}.${3:container}",
			"        }),",
			"        hooks: {",
			"            onMount: () => {",
			"                ${5:// Component mounted}",
			"            },",
			"            onUpdate: (oldProps, newProps) => {",
			"                ${6:// Component updated}",
			"            },",
			"            onUnmount: () => {",
			"                ${7:// Component unmounted}",
			"            }",
			"        }",
			"    };",
			"};"
		],
		"description": "Juris component with lifecycle hooks and JSDoc"
	},
	"Juris Headless Component": {
		"prefix": "jheadless",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContext} context",
			" * @returns {HeadlessComponent}",
			" */",
			"const ${1:HeadlessComponent} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        api: {",
			"            ${2:methodName}: () => {",
			"                ${3:// API method}",
			"            }",
			"        },",
			"        hooks: {",
			"            onRegister: () => {",
			"                ${4:// Component registered}",
			"            },",
			"            onUnregister: () => {",
			"                ${5:// Component unregistered}",
			"            }",
			"        }",
			"    };",
			"};"
		],
		"description": "Headless component with API, hooks and JSDoc"
	},
	"Juris Typed Component": {
		"prefix": "jcomptyped",
		"body": [
			"/**",
			" * @typedef {Object} ${1:ComponentName}Props",
			" * @property {string} ${2:title} - The component title",
			" * @property {number} [${3:count}] - Optional count value",
			" */",
			"",
			"/**",
			" * @param {${1:ComponentName}Props} props",
			" * @param {JurisContext} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"const ${1:ComponentName} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    const { ${2:title}, ${3:count} = 0 } = props;",
			"    ",
			"    return {",
			"        ${4:div}: {",
			"            className: '${5:container}',",
			"            children: [",
			"                {h1: {text: ${2:title}}}//h1,",
			"                {p: {text: `Count: ${${3:count}}`}}//p",
			"            ]",
			"        }//${4:div}.${5:container}",
			"    };",
			"};"
		],
		"description": "Strongly typed Juris component with JSDoc typedef"
	},
	"Juris Component with State Types": {
		"prefix": "jcompstate",
		"body": [
			"/**",
			" * @typedef {Object} ${1:ComponentName}State",
			" * @property {boolean} isLoading - Loading state",
			" * @property {string} message - Status message",
			" * @property {Array<Object>} items - List of items",
			" */",
			"",
			"/**",
			" * @param {Object} props",
			" * @param {JurisContext<${1:ComponentName}State>} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"const ${1:ComponentName} = (props, context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        ${2:div}: {",
			"            className: '${3:container}',",
			"            children: [",
			"                $4",
			"            ]",
			"        }//${2:div}.${3:container}",
			"    };",
			"};"
		],
		"description": "Component with typed state using JSDoc"
	},
	"Juris Enhancement Basic": {
		"prefix": "jenhan",
		"body": [
			"juris.enhance('${1:.selector}', {",
			"    ${2:text}: '${3:Enhanced text}',",
			"    ${4:onClick}: () => {",
			"        ${5:// Enhancement logic}",
			"    }",
			"});"
		],
		"description": "Basic DOM enhancement"
	},
	"Juris Enhancement with Selectors": {
		"prefix": "jenhansel",
		"body": [
			"juris.enhance('${1:.container}', {",
			"    className: '${2:enhanced-container}',",
			"    selectors: {",
			"        '${3:.button}': {",
			"            ${4:text}: '${5:Enhanced Button}',",
			"            ${6:onClick}: () => {",
			"                ${7:// Button enhancement}",
			"            }",
			"        },",
			"        '${8:.input}': {",
			"            ${9:placeholder}: '${10:Enhanced placeholder}',",
			"            ${11:onInput}: (e) => {",
			"                ${12:// Input enhancement}",
			"            }",
			"        }",
			"    }",
			"});"
		],
		"description": "Enhancement with nested selectors"
	},
	"Juris Enhancement Function": {
		"prefix": "jenhanfn",
		"body": [
			"juris.enhance('${1:.selector}', (context) => {",
			"    const { getState, setState } = context;",
			"    ",
			"    return {",
			"        ${2:text}: () => getState('${3:textPath}'),",
			"        ${4:onClick}: () => {",
			"            ${5:// Dynamic enhancement}",
			"        }",
			"    };",
			"});"
		],
		"description": "Enhancement with function and reactive props"
	},
	"Juris Div Container": {
		"prefix": "jdiv",
		"body": [
			"{div: {",
			"    className: '${1:container}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//div.${1:container}"
		],
		"description": "Div container with className"
	},
	"Juris Div with ClassName": {
		"prefix": "jdiv.",
		"body": [
			"{div: {",
			"    className: '${1:container}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//div.${1:container}"
		],
		"description": "Div with className (use jdiv.classname)"
	},
	"Juris Div with ID": {
		"prefix": "jdiv#",
		"body": [
			"{div: {",
			"    id: '${1:myId}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//div#${1:myId}"
		],
		"description": "Div with ID (use jdiv#idname)"
	},
	"Juris Section": {
		"prefix": "jsection",
		"body": [
			"{section: {",
			"    className: '${1:section}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//section.${1:section}"
		],
		"description": "Section element with className"
	},
	"Juris Section with ClassName": {
		"prefix": "jsection.",
		"body": [
			"{section: {",
			"    className: '${1:hero}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//section.${1:hero}"
		],
		"description": "Section with className (use jsection.classname)"
	},
	"Juris Section with ID": {
		"prefix": "jsection#",
		"body": [
			"{section: {",
			"    id: '${1:sectionId}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//section#${1:sectionId}"
		],
		"description": "Section with ID (use jsection#idname)"
	},
	"Juris Article": {
		"prefix": "jarticle",
		"body": [
			"{article: {",
			"    className: '${1:article}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//article.${1:article}"
		],
		"description": "Article element with className"
	},
	"Juris Article with ClassName": {
		"prefix": "jarticle.",
		"body": [
			"{article: {",
			"    className: '${1:post}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//article.${1:post}"
		],
		"description": "Article with className (use jarticle.classname)"
	},
	"Juris Article with ID": {
		"prefix": "jarticle#",
		"body": [
			"{article: {",
			"    id: '${1:articleId}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//article#${1:articleId}"
		],
		"description": "Article with ID (use jarticle#idname)"
	},
	"Juris Header": {
		"prefix": "jheader",
		"body": [
			"{header: {",
			"    className: '${1:header}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//header.${1:header}"
		],
		"description": "Header element with className"
	},
	"Juris Header with ClassName": {
		"prefix": "jheader.",
		"body": [
			"{header: {",
			"    className: '${1:main-header}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//header.${1:main-header}"
		],
		"description": "Header with className (use jheader.classname)"
	},
	"Juris Header with ID": {
		"prefix": "jheader#",
		"body": [
			"{header: {",
			"    id: '${1:pageHeader}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//header#${1:pageHeader}"
		],
		"description": "Header with ID (use jheader#idname)"
	},
	"Juris Footer": {
		"prefix": "jfooter",
		"body": [
			"{footer: {",
			"    className: '${1:footer}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//footer.${1:footer}"
		],
		"description": "Footer element with className"
	},
	"Juris Footer with ClassName": {
		"prefix": "jfooter.",
		"body": [
			"{footer: {",
			"    className: '${1:main-footer}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//footer.${1:main-footer}"
		],
		"description": "Footer with className (use jfooter.classname)"
	},
	"Juris Footer with ID": {
		"prefix": "jfooter#",
		"body": [
			"{footer: {",
			"    id: '${1:pageFooter}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//footer#${1:pageFooter}"
		],
		"description": "Footer with ID (use jfooter#idname)"
	},
	"Juris Navigation": {
		"prefix": "jnav",
		"body": [
			"{nav: {",
			"    className: '${1:navigation}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//nav.${1:navigation}"
		],
		"description": "Navigation element with className"
	},
	"Juris Nav with ClassName": {
		"prefix": "jnav.",
		"body": [
			"{nav: {",
			"    className: '${1:navigation}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//nav.${1:navigation}"
		],
		"description": "Navigation with className (use jnav.classname)"
	},
	"Juris Nav with ID": {
		"prefix": "jnav#",
		"body": [
			"{nav: {",
			"    id: '${1:mainNav}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//nav#${1:mainNav}"
		],
		"description": "Navigation with ID (use jnav#idname)"
	},
	"Juris Main": {
		"prefix": "jmain",
		"body": [
			"{main: {",
			"    className: '${1:main}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//main.${1:main}"
		],
		"description": "Main element with className"
	},
	"Juris Main with ClassName": {
		"prefix": "jmain.",
		"body": [
			"{main: {",
			"    className: '${1:content}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//main.${1:content}"
		],
		"description": "Main with className (use jmain.classname)"
	},
	"Juris Main with ID": {
		"prefix": "jmain#",
		"body": [
			"{main: {",
			"    id: '${1:mainContent}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//main#${1:mainContent}"
		],
		"description": "Main with ID (use jmain#idname)"
	},
	"Juris Aside": {
		"prefix": "jaside",
		"body": [
			"{aside: {",
			"    className: '${1:sidebar}',",
			"    children: [",
			"        $2",
			"    ]",
			"}}//aside.${1:sidebar}"
		],
		"description": "Aside element with className"
	},
	"Juris Aside with ClassName": {
		"prefix": "jaside.",
		"body": [
			"{aside: {",
			"    className: '${1:sidebar}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//aside.${1:sidebar}"
		],
		"description": "Aside with className (use jaside.classname)"
	},
	"Juris Aside with ID": {
		"prefix": "jaside#",
		"body": [
			"{aside: {",
			"    id: '${1:sidebar}',",
			"    children: [",
			"        ${2}",
			"    ]",
			"}}//aside#${1:sidebar}"
		],
		"description": "Aside with ID (use jaside#idname)"
	},
	"Juris Button": {
		"prefix": "jbtn",
		"body": [
			"{button: {text: '${1:Button Text}', onClick: () => ${2:handleClick()}}}//button"
		],
		"description": "Button with click handler"
	},
	"Juris Button with ClassName": {
		"prefix": "jbtn.",
		"body": [
			"{button: {",
			"    className: '${1:primary}',",
			"    text: '${2:Button}',",
			"    onClick: () => ${3:handleClick()}",
			"}}//button.${1:primary}"
		],
		"description": "Button with className (use jbtn.classname)"
	},
	"Juris Button with ID": {
		"prefix": "jbtn#",
		"body": [
			"{button: {",
			"    id: '${1:submitBtn}',",
			"    text: '${2:Submit}',",
			"    onClick: () => ${3:handleSubmit()}",
			"}}//button#${1:submitBtn}"
		],
		"description": "Button with ID (use jbtn#idname)"
	},
	"Juris Button with State": {
		"prefix": "jbtns",
		"body": [
			"{button: {text: '${1:Button Text}', onClick: () => setState('${2:statePath}', ${3:value})}}//button"
		],
		"description": "Button with setState"
	},
	"Juris Button Reactive": {
		"prefix": "jbtnr",
		"body": [
			"{button: {",
			"    text: () => getState('${1:buttonText}'),",
			"    disabled: () => getState('${2:isDisabled}'),",
			"    onClick: () => setState('${3:statePath}', ${4:value})",
			"}}//button"
		],
		"description": "Reactive button with dynamic text and disabled state"
	},
	"Juris Input Text": {
		"prefix": "jinput",
		"body": [
			"{input: {",
			"    type: '${1:text}',",
			"    value: () => getState('${2:inputValue}'),",
			"    onInput: (e) => setState('${3:inputValue}', e.target.value)",
			"}}//input"
		],
		"description": "Text input with reactive value"
	},
	"Juris Input with ClassName": {
		"prefix": "jinput.",
		"body": [
			"{input: {",
			"    className: '${1:form-input}',",
			"    type: '${2:text}',",
			"    value: () => getState('${3:inputValue}'),",
			"    onInput: (e) => setState('${4:inputValue}', e.target.value)",
			"}}//input.${1:form-input}"
		],
		"description": "Input with className (use jinput.classname)"
	},
	"Juris Input with ID": {
		"prefix": "jinput#",
		"body": [
			"{input: {",
			"    id: '${1:emailInput}',",
			"    type: '${2:text}',",
			"    value: () => getState('${3:inputValue}'),",
			"    onInput: (e) => setState('${4:inputValue}', e.target.value)",
			"}}//input#${1:emailInput}"
		],
		"description": "Input with ID (use jinput#idname)"
	},
	"Juris Input with Placeholder": {
		"prefix": "jinputp",
		"body": [
			"{input: {",
			"    type: '${1:text}',",
			"    placeholder: '${2:Enter text...}',",
			"    value: () => getState('${3:inputValue}'),",
			"    onInput: (e) => setState('${4:inputValue}', e.target.value)",
			"}}//input"
		],
		"description": "Input with placeholder and reactive value"
	},
	"Juris Select": {
		"prefix": "jselect",
		"body": [
			"{select: {",
			"    value: () => getState('${1:selectedValue}'),",
			"    onChange: (e) => setState('${2:selectedValue}', e.target.value),",
			"    children: [",
			"        {option: {value: '${3:value1}', text: '${4:Option 1}'}}//option,",
			"        {option: {value: '${5:value2}', text: '${6:Option 2}'}}//option,",
			"        {option: {value: '${7:value3}', text: '${8:Option 3}'}}//option",
			"    ]",
			"}}//select"
		],
		"description": "Select dropdown with options"
	},
	"Juris Select with ClassName": {
		"prefix": "jselect.",
		"body": [
			"{select: {",
			"    className: '${1:form-select}',",
			"    value: () => getState('${2:selectedValue}'),",
			"    onChange: (e) => setState('${3:selectedValue}', e.target.value),",
			"    children: [",
			"        {option: {value: '${4:option1}', text: '${5:Option 1}'}}//option,",
			"        {option: {value: '${6:option2}', text: '${7:Option 2}'}}//option",
			"    ]",
			"}}//select.${1:form-select}"
		],
		"description": "Select with className (use jselect.classname)"
	},
	"Juris Select with ID": {
		"prefix": "jselect#",
		"body": [
			"{select: {",
			"    id: '${1:categorySelect}',",
			"    value: () => getState('${2:selectedValue}'),",
			"    onChange: (e) => setState('${3:selectedValue}', e.target.value),",
			"    children: [",
			"        {option: {value: '${4:option1}', text: '${5:Option 1}'}}//option,",
			"        {option: {value: '${6:option2}', text: '${7:Option 2}'}}//option",
			"    ]",
			"}}//select#${1:categorySelect}"
		],
		"description": "Select with ID (use jselect#idname)"
	},
	"Juris Textarea": {
		"prefix": "jtextarea",
		"body": [
			"{textarea: {",
			"    value: () => getState('${1:textValue}'),",
			"    onInput: (e) => setState('${2:textValue}', e.target.value),",
			"    placeholder: '${3:Enter text...}',",
			"    rows: ${4:4}",
			"}}//textarea"
		],
		"description": "Textarea with reactive value"
	},
	"Juris Form": {
		"prefix": "jform",
		"body": [
			"{form: {",
			"    onSubmit: (e) => {",
			"        e.preventDefault();",
			"        ${1:handleSubmit()};",
			"    },",
			"    children: [",
			"        $2",
			"    ]",
			"}}//form"
		],
		"description": "Form with submit handler"
	},
	"Juris Form with ClassName": {
		"prefix": "jform.",
		"body": [
			"{form: {",
			"    className: '${1:contact-form}',",
			"    onSubmit: (e) => {",
			"        e.preventDefault();",
			"        ${2:handleSubmit()};",
			"    },",
			"    children: [",
			"        ${3}",
			"    ]",
			"}}//form.${1:contact-form}"
		],
		"description": "Form with className (use jform.classname)"
	},
	"Juris Form with ID": {
		"prefix": "jform#",
		"body": [
			"{form: {",
			"    id: '${1:contactForm}',",
			"    onSubmit: (e) => {",
			"        e.preventDefault();",
			"        ${2:handleSubmit()};",
			"    },",
			"    children: [",
			"        ${3}",
			"    ]",
			"}}//form#${1:contactForm}"
		],
		"description": "Form with ID (use jform#idname)"
	},
	"Juris Label": {
		"prefix": "jlabel",
		"body": [
			"{label: {",
			"    htmlFor: '${1:inputId}',",
			"    text: '${2:Label Text}'",
			"}}//label"
		],
		"description": "Label element"
	},
	"Juris Fieldset": {
		"prefix": "jfieldset",
		"body": [
			"{fieldset: {",
			"    children: [",
			"        {legend: {text: '${1:Legend Text}'}}//legend,",
			"        $2",
			"    ]",
			"}}//fieldset"
		],
		"description": "Fieldset with legend"
	},
	"Juris Paragraph": {
		"prefix": "jp",
		"body": [
			"{p: {text: '${1:Paragraph text}'}}//p"
		],
		"description": "Paragraph element"
	},
	"Juris Paragraph with ClassName": {
		"prefix": "jp.",
		"body": [
			"{p: {className: '${1:description}', text: '${2:Paragraph text}'}}//p.${1:description}"
		],
		"description": "Paragraph with className (use jp.classname)"
	},
	"Juris Paragraph with ID": {
		"prefix": "jp#",
		"body": [
			"{p: {id: '${1:intro}', text: '${2:Paragraph text}'}}//p#${1:intro}"
		],
		"description": "Paragraph with ID (use jp#idname)"
	},
	"Juris Reactive Text": {
		"prefix": "jtext",
		"body": [
			"{${1:p}: {text: () => getState('${2:textPath}')}}//${1:p}"
		],
		"description": "Reactive text element"
	},
	"Juris Heading": {
		"prefix": "jh1",
		"body": [
			"{h${1:1}: {text: '${2:Heading text}'}}//h${1:1}"
		],
		"description": "Heading element (h1-h6)"
	},
	"Juris Heading with ClassName": {
		"prefix": "jh1.",
		"body": [
			"{h${1:1}: {className: '${2:title}', text: '${3:Heading text}'}}//h${1:1}.${2:title}"
		],
		"description": "Heading with className (use jh1.classname, jh2.classname, etc.)"
	},
	"Juris Heading with ID": {
		"prefix": "jh1#",
		"body": [
			"{h${1:1}: {id: '${2:pageTitle}', text: '${3:Heading text}'}}//h${1:1}#${2:pageTitle}"
		],
		"description": "Heading with ID (use jh1#idname, jh2#idname, etc.)"
	},
	"Juris Span": {
		"prefix": "jspan",
		"body": [
			"{span: {text: '${1:Span text}'}}//span"
		],
		"description": "Span element"
	},
	"Juris Span with ClassName": {
		"prefix": "jspan.",
		"body": [
			"{span: {className: '${1:highlight}', text: '${2:Span text}'}}//span.${1:highlight}"
		],
		"description": "Span with className (use jspan.classname)"
	},
	"Juris Span with ID": {
		"prefix": "jspan#",
		"body": [
			"{span: {id: '${1:status}', text: '${2:Span text}'}}//span#${1:status}"
		],
		"description": "Span with ID (use jspan#idname)"
	},
	"Juris Link": {
		"prefix": "jlink",
		"body": [
			"{a: {",
			"    href: '${1:url}',",
			"    text: '${2:Link text}',",
			"    target: '${3:_blank}'",
			"}}//a"
		],
		"description": "Link element"
	},
	"Juris Image": {
		"prefix": "jimg",
		"body": [
			"{img: {",
			"    src: '${1:image-url}',",
			"    alt: '${2:Alt text}',",
			"    width: '${3:auto}',",
			"    height: '${4:auto}'",
			"}}//img"
		],
		"description": "Image element"
	},
	"Juris List Unordered": {
		"prefix": "jul",
		"body": [
			"{ul: {",
			"    className: '${1:list}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}//li,",
			"        {li: {text: '${3:Item 2}'}}//li,",
			"        {li: {text: '${4:Item 3}'}}//li",
			"    ]",
			"}}//ul.${1:list}"
		],
		"description": "Unordered list with items"
	},
	"Juris List with ClassName": {
		"prefix": "jul.",
		"body": [
			"{ul: {",
			"    className: '${1:menu}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}//li,",
			"        {li: {text: '${3:Item 2}'}}//li,",
			"        {li: {text: '${4:Item 3}'}}//li",
			"    ]",
			"}}//ul.${1:menu}"
		],
		"description": "Unordered list with className (use jul.classname)"
	},
	"Juris List with ID": {
		"prefix": "jul#",
		"body": [
			"{ul: {",
			"    id: '${1:menuList}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}//li,",
			"        {li: {text: '${3:Item 2}'}}//li,",
			"        {li: {text: '${4:Item 3}'}}//li",
			"    ]",
			"}}//ul#${1:menuList}"
		],
		"description": "Unordered list with ID (use jul#idname)"
	},
	"Juris List Ordered": {
		"prefix": "jol",
		"body": [
			"{ol: {",
			"    className: '${1:numbered-list}',",
			"    children: [",
			"        {li: {text: '${2:Item 1}'}}//li,",
			"        {li: {text: '${3:Item 2}'}}//li,",
			"        {li: {text: '${4:Item 3}'}}//li",
			"    ]",
			"}}//ol.${1:numbered-list}"
		],
		"description": "Ordered list with items"
	},
	"Juris List Item": {
		"prefix": "jli",
		"body": [
			"{li: {text: '${1:List item text}'}}//li"
		],
		"description": "List item"
	},
	"Juris Table": {
		"prefix": "jtable",
		"body": [
			"{table: {",
			"    className: '${1:data-table}',",
			"    children: [",
			"        {thead: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {th: {text: '${2:Header 1}'}}//th,",
			"                        {th: {text: '${3:Header 2}'}}//th,",
			"                        {th: {text: '${4:Header 3}'}}//th",
			"                    ]",
			"                }}//tr",
			"            ]",
			"        }}//thead,",
			"        {tbody: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {td: {text: '${5:Cell 1}'}}//td,",
			"                        {td: {text: '${6:Cell 2}'}}//td,",
			"                        {td: {text: '${7:Cell 3}'}}//td",
			"                    ]",
			"                }}//tr",
			"            ]",
			"        }}//tbody",
			"    ]",
			"}}//table.${1:data-table}"
		],
		"description": "Complete table with header and body"
	},
	"Juris Table with ClassName": {
		"prefix": "jtable.",
		"body": [
			"{table: {",
			"    className: '${1:data-table}',",
			"    children: [",
			"        {thead: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {th: {text: '${2:Header 1}'}}//th,",
			"                        {th: {text: '${3:Header 2}'}}//th",
			"                    ]",
			"                }}//tr",
			"            ]",
			"        }}//thead,",
			"        {tbody: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {td: {text: '${4:Cell 1}'}}//td,",
			"                        {td: {text: '${5:Cell 2}'}}//td",
			"                    ]",
			"                }}//tr",
			"            ]",
			"        }}//tbody",
			"    ]",
			"}}//table.${1:data-table}"
		],
		"description": "Table with className (use jtable.classname)"
	},
	"Juris Table with ID": {
		"prefix": "jtable#",
		"body": [
			"{table: {",
			"    id: '${1:dataTable}',",
			"    children: [",
			"        {thead: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {th: {text: '${2:Header 1}'}}//th,",
			"                        {th: {text: '${3:Header 2}'}}//th",
			"                    ]",
			"                }}//tr",
			"            ]",
			"        }}//thead,",
			"        {tbody: {",
			"            children: [",
			"                {tr: {",
			"                    children: [",
			"                        {td: {text: '${4:Cell 1}'}}//td,",
			"                        {td: {text: '${5:Cell 2}'}}//td",
			"                    ]",
			"                }}//tr",
			"            ]",
			"        }}//tbody",
			"    ]",
			"}}//table#${1:dataTable}"
		],
		"description": "Table with ID (use jtable#idname)"
	},
	"Juris Table Row": {
		"prefix": "jtr",
		"body": [
			"{tr: {",
			"    children: [",
			"        {td: {text: '${1:Cell 1}'}}//td,",
			"        {td: {text: '${2:Cell 2}'}}//td,",
			"        {td: {text: '${3:Cell 3}'}}//td",
			"    ]",
			"}}//tr"
		],
		"description": "Table row with cells"
	},
	"Juris Canvas": {
		"prefix": "jcanvas",
		"body": [
			"{canvas: {",
			"    width: ${1:800},",
			"    height: ${2:600},",
			"    className: '${3:canvas}'",
			"}}//canvas"
		],
		"description": "Canvas element"
	},
	"Juris Video": {
		"prefix": "jvideo",
		"body": [
			"{video: {",
			"    src: '${1:video-url}',",
			"    controls: true,",
			"    width: '${2:100%}',",
			"    height: '${3:auto}'",
			"}}//video"
		],
		"description": "Video element"
	},
	"Juris Audio": {
		"prefix": "jaudio",
		"body": [
			"{audio: {",
			"    src: '${1:audio-url}',",
			"    controls: true",
			"}}//audio"
		],
		"description": "Audio element"
	},
	"Juris Iframe": {
		"prefix": "jiframe",
		"body": [
			"{iframe: {",
			"    src: '${1:iframe-url}',",
			"    width: '${2:100%}',",
			"    height: '${3:400}',",
			"    frameBorder: '0'",
			"}}//iframe"
		],
		"description": "Iframe element"
	},
	"Juris Progress Bar": {
		"prefix": "jprogress",
		"body": [
			"{progress: {",
			"    value: () => getState('${1:progressValue}'),",
			"    max: ${2:100}",
			"}}//progress"
		],
		"description": "Progress bar element"
	},
	"Juris Meter": {
		"prefix": "jmeter",
		"body": [
			"{meter: {",
			"    value: () => getState('${1:meterValue}'),",
			"    min: ${2:0},",
			"    max: ${3:100},",
			"    low: ${4:25},",
			"    high: ${5:75}",
			"}}//meter"
		],
		"description": "Meter element"
	},
	"Juris Details": {
		"prefix": "jdetails",
		"body": [
			"{details: {",
			"    open: () => getState('${1:isOpen}'),",
			"    children: [",
			"        {summary: {text: '${2:Summary text}'}}//summary,",
			"        {div: {",
			"            children: [",
			"                $3",
			"            ]",
			"        }}//div",
			"    ]",
			"}}//details"
		],
		"description": "Details/summary collapsible element"
	},
	"Juris Dialog": {
		"prefix": "jdialog",
		"body": [
			"{dialog: {",
			"    open: () => getState('${1:isDialogOpen}'),",
			"    children: [",
			"        $2",
			"    ]",
			"}}//dialog"
		],
		"description": "Dialog modal element"
	},
	"Juris Conditional Render": {
		"prefix": "jif",
		"body": [
			"...(getState('${1:condition}') ? [",
			"    {${2:div}: {${3:}}}//{{2:div}",
			"] : [])"
		],
		"description": "Conditional rendering"
	},
	"Juris Map Array": {
		"prefix": "jmap",
		"body": [
			"...getState('${1:arrayPath}', []).map((${2:item}, ${3:index}) => ({",
			"    ${4:div}: {",
			"        key: ${3:index},",
			"        text: ${2:item}.${5:property}",
			"    }",
			"}//{{4:div}))"
		],
		"description": "Array mapping with auto-label"
	},
	"Juris Quick Button Array": {
		"prefix": "jbtns3",
		"body": [
			"{button: {text: '${1:Tab 1}', onClick: () => setState('${2:activeTab}', ${3:0})}}//button,",
			"{button: {text: '${4:Tab 2}', onClick: () => setState('${2:activeTab}', ${5:1})}}//button,",
			"{button: {text: '${6:Tab 3}', onClick: () => setState('${2:activeTab}', ${7:2})}}//button"
		],
		"description": "Quick three-button array"
	},
	"Juris State Subscription": {
		"prefix": "jsub",
		"body": [
			"const unsubscribe = context.subscribe('${1:statePath}', (newValue, oldValue) => {",
			"    ${2:// Handle state change}",
			"});"
		],
		"description": "State subscription"
	},
	"Juris New State": {
		"prefix": "jstate",
		"body": [
			"const [${1:getValue}, ${2:setValue}] = context.newState('${3:stateName}', ${4:initialValue});"
		],
		"description": "Create new local state"
	},
	"Juris Service Injection": {
		"prefix": "jservice",
		"body": [
			"const ${1:serviceName} = context.services.${2:serviceName} || context.${2:serviceName};"
		],
		"description": "Service injection"
	},
	"Juris Template Compilation": {
		"prefix": "jtemplate",
		"body": [
			"<template data-component=\"${1:ComponentName}\" data-context=\"${2:getState, setState}\">",
			"<script>",
			"    /**",
			"     * @param {Object} props",
			"     * @param {JurisContext} context",
			"     * @returns {JurisVDOMElement}",
			"     */",
			"    ${3:// Component logic}",
			"</script>",
			"<div class=\"${4:container}\">",
			"    ${5:<!-- Component HTML -->}",
			"</div>",
			"</template>"
		],
		"description": "Juris template compilation structure with JSDoc"
	},
	"Juris Simple Tab Component": {
		"prefix": "jtab",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContext} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"export const ${1:SimpleTab} = (props, { getState, setState }) => {",
			"    return {",
			"        div: {",
			"            children: [",
			"                {",
			"                    div: {",
			"                        className: '${2:tab-buttons}',",
			"                        children: [",
			"                            { button: { text: '${3:Tab 1}', onClick: () => setState('${4:activeTab}', 0) } },//button",
			"                            { button: { text: '${5:Tab 2}', onClick: () => setState('${4:activeTab}', 1) } },//button",
			"                            { button: { text: '${6:Tab 3}', onClick: () => setState('${4:activeTab}', 2) } },//button",
			"                        ]",
			"                    }//div.${2:tab-buttons}",
			"                }, {",
			"                    div: {",
			"                        className: '${7:tab-content}',",
			"                        children: () => {",
			"                            const active = getState('${4:activeTab}', 0);",
			"                            /** @type {JurisVDOMElement[]} */",
			"                            const contents = [",
			"                                { ${8:p}: { text: '${9:Content 1}' } },//{{8:p}",
			"                                { ${8:p}: { text: '${10:Content 2}' } },//{{8:p}",
			"                                { ${8:p}: { text: '${11:Content 3}' } },//{{8:p}",
			"                            ];",
			"                            return [contents[active]];",
			"                        }",
			"                    }//div.${7:tab-content}",
			"                }",
			"            ]",
			"        }//div",
			"    };",
			"};"
		],
		"description": "Complete tab component with reactive content switching"
	},
	"Juris Tab System": {
		"prefix": "jtabs",
		"body": [
			"/**",
			" * @param {Object} props",
			" * @param {JurisContext} context",
			" * @returns {JurisVDOMElement}",
			" */",
			"export const ${1:TabSystem} = (props, { getState, setState }) => {",
			"    const { ${2:tabs} = ['${3:Tab 1}', '${4:Tab 2}', '${5:Tab 3}'] } = props;",
			"    ",
			"    return {",
			"        div: {",
			"            className: '${6:tab-system}',",
			"            children: [",
			"                {",
			"                    div: {",
			"                        className: '${7:tab-nav}',",
			"                        children: () => {",
			"                            return ${2:tabs}.map((tab, index) => ({",
			"                                button: {",
			"                                    className: () => {",
			"                                        const active = getState('${8:activeTab}', 0);",
			"                                        return active === index ? '${9:tab-active}' : '${10:tab-inactive}';",
			"                                    },",
			"                                    text: tab,",
			"                                    onClick: () => setState('${8:activeTab}', index)",
			"                                }//button",
			"                            }));",
			"                        }",
			"                    }//div.${7:tab-nav}",
			"                }, {",
			"                    div: {",
			"                        className: '${11:tab-panel}',",
			"                        children: () => {",
			"                            const active = getState('${8:activeTab}', 0);",
			"                            /** @type {JurisVDOMElement[]} */",
			"                            const contents = [",
			"                                ${12:// Add your tab content here}",
			"                            ];",
			"                            return [contents[active] || { p: { text: 'No content' } }//p];",
			"                        }",
			"                    }//div.${11:tab-panel}",
			"                }",
			"            ]",
			"        }//div.${6:tab-system}",
			"    };",
			"};"
		],
		"description": "Dynamic tab system with props-based tab names"
	}
}